import * as resources from "./resources";
import {Util} from "./util";
import { IdempotencyConstants } from "./idempotency_constants";

export class Result {
    readonly #_response: any;
    readonly responseHeaders: any;
    readonly responseStatusCode: number | string;

body

    get response() {
        return this.#_response;
    }

    constructor(response, responseHeaders?, responseStatusCode?) {
        this.#_response = response;
        if (responseHeaders) {
          this.responseHeaders = responseHeaders;
        }
        if(responseStatusCode){
            this.responseStatusCode = responseStatusCode;
        }
    }

    getResponseHeaders(){
        return this.responseHeaders;
    }

    isIdempotencyReplayed(): boolean {
        const headers = this.responseHeaders;
        const replayedHeader = headers[IdempotencyConstants.IDEMPOTENCY_REPLAY_HEADER];
        if (replayedHeader === undefined) {
            return false;
        }
        return Boolean(replayedHeader);
    }

    private get<T = any>(type, klass, sub_types = {}, dependant_types = {}): T {
        return new (resources)[klass](this.response[type], sub_types, dependant_types)
    }

    private get_list<T = any>(type, klass, sub_types = {}, dependant_types = {}, dependant_sub_types = {}): T[] {
        if(Util.isEmptyObject(this.response) || Util.isEmptyObject(this.response[type])) {
            return null;
        }

        let set_val = [];
        for(let obj of this.response[type]) {
            let model = new (resources)[klass](obj, sub_types, dependant_types);
            for(let k in dependant_sub_types) {
                let v = dependant_sub_types[k];
                model.init_dependant(obj, k, v);
            }
            set_val.push(model);
        }
        return set_val;
    }

    private toString(...args) {
        return JSON.stringify(this.response, null, 2);
    }
    getResponseStatusCode(){
        return this.responseStatusCode;
    }
}
