import os.path
from dataclasses import dataclass

import chargebee
from chargebee.environment import Environment


@dataclass
class Chargebee:

    env: Environment = None
    idempotency_header: str = "chargebee-idempotency-key"

    verify_ca_certs: bool = True
    ca_cert_path = os.path.join(os.path.dirname(__file__), "ssl", "ca-certs.crt")

    def __init__(
        self,
        api_key: str,
        site: str,
        chargebee_domain: str = None,
        protocol: str = None,
        connection_time_out: int = None,
        read_time_out: int = None,
        use_async_client: bool = False,
    ):
        self.env = Environment({"api_key": api_key, "site": site})
        if chargebee_domain is not None:
            self.update_chargebee_domain(chargebee_domain)
        if protocol is not None:
            self.update_protocol(protocol)
        if connection_time_out is not None:
            self.update_connect_timeout_secs(connection_time_out)
        if read_time_out is not None:
            self.update_read_timeout_secs(read_time_out)
        if use_async_client:
            self.env.use_async_client = True
        self.env.set_api_endpoint()

        self.Customer = chargebee.Customer(self.env)
        self.Subscription = chargebee.Subscription(self.env)

    def update_connect_timeout_secs(self, connect_timeout):
        self.env.connect_timeout = connect_timeout

    def update_read_timeout_secs(self, read_timeout):
        self.env.read_timeout = read_timeout

    def update_chargebee_domain(self, domain):
        self.env.chargebee_domain = domain

    def update_protocol(self, protocol):
        if protocol == "http":
            self.verify_ca_certs = False
        self.env.protocol = protocol

    def update_export_retry_delay_ms(self, export_retry_delay_ms):
        self.env.export_retry_delay_ms = export_retry_delay_ms

    def update_time_travel_retry_delay_ms(self, time_travel_retry_delay_ms):
        self.env.time_travel_retry_delay_ms = time_travel_retry_delay_ms

    def update_retry_config(self, retry_config):
        self.env.retry_config = retry_config

    def update_enable_debug_logs(self, enable_debug_logs):
        self.env.enable_debug_logs = enable_debug_logs