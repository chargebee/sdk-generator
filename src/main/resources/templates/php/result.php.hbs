<?php

namespace ChargeBee\ChargeBee;

use ChargeBee\ChargeBee\Models;

define('IDEMPOTENCY_REPLAY_HEADER', 'chargebee-idempotency-replayed');

class Result
{
    private $_response;
    private $_responseHeaders;
    private $_responseObj;
    private $_responseStatusCode;
    public function __construct($_response, $_responseHeaders = null, $_responseStatusCode = null)
    {
            $this->_response = $_response;
        $this->_responseHeaders = $_responseHeaders;
            $this->_responseObj = array();
            $this->_responseStatusCode = $_responseStatusCode;
    }

    public function getResponseHeaders()
    {
        return $this->_responseHeaders;
    }

    public function getResponseStatusCode()
    {
        return $this->_responseStatusCode;
    }

    public function isIdempotencyReplayed()
    {   {{NonBreakingSpace}}
        $headers = $this->getResponseHeaders();
        if (isset($headers[IDEMPOTENCY_REPLAY_HEADER])) {
            $value = $headers[IDEMPOTENCY_REPLAY_HEADER][0];
            return  boolval($value);
        }
        return false;
    }
{{#each responses}}{{#unless hasDependentAttributes }}
    public function {{ pascalCaseToCamelCase name }}() {{NonBreakingSpace}}
    {
        ${{ pascalCaseToSnakeCase name }} = $this->_get('{{ pascalCaseToSnakeCase name }}', Models\ {{~ name }}::class{{#if subResources}}, {{NonBreakingSpace}}
        array( {{NonBreakingSpace}}{{#each subResources}}
			'{{ pascalCaseToSnakeCase name }}' => Models\ {{~ ../name}}{{ singularize name }}::class{{#unless @last}}, {{/unless}}{{/each}}
		));{{else}});{{/if}}
        return ${{ pascalCaseToSnakeCase name }};
    }
{{/unless}}{{#if hasDependentAttributes}}
    public function {{ pascalCaseToCamelCase name }}() {{NonBreakingSpace}}
    {
        ${{ pascalCaseToSnakeCase name }} = $this->_get('{{ pascalCaseToSnakeCase name }}', Models\ {{~ singularize name }}::class, array(){{#if dependentResources}},
        array( {{NonBreakingSpace}}{{#each dependentResources}}
			'{{ id }}' => Models\ {{~ name }}::class{{#unless @last}}, {{/unless}}{{/each}}
		));{{else}});{{/if}}{{#each singularDependentResources}}
        ${{ pascalCaseToSnakeCase ../name }}->_initDependant($this->_response['{{ pascalCaseToSnakeCase ../name }}'], '{{ pascalCaseToSnakeCase id }}',
        array( {{NonBreakingSpace}}{{#each subResources}}
			'{{id }}' => Models\ {{~ ../name }}{{ singularize name }}::class{{#unless @last}}, {{/unless}}{{/each}}
		));{{/each}}{{#each listDependentResources}}
        ${{ pascalCaseToSnakeCase ../name }}->_initDependantList($this->_response['{{ pascalCaseToSnakeCase ../name }}'], '{{ pascalCaseToSnakeCase id }}',
        array( {{NonBreakingSpace}}{{#each subResources}}
			'{{id }}' => Models\ {{~ ../name }}{{singularize name }}::class{{#unless @last}}, {{/unless}}{{/each}}
		));{{/each}}
        return ${{ pascalCaseToSnakeCase name }};
    }
{{/if}}{{/each}}{{#each listResponses}}
    public function {{ snakeCaseToCamelCase pathName }}()
    {
        ${{ pathName }} = $this->_getList('{{ pathName }}', Models\ {{~ name }}::class,
        array( {{NonBreakingSpace}}{{#each subResources}}
			'{{ id }}' => Models\ {{~ ../name }}{{ singularize name }}::class{{#unless @last}}, {{/unless}}{{/each}}
		));
        return ${{ pathName }};
    }
{{/each}}

    public function toJson()
    {
        return json_encode($this->_response);
    }

    private function _getList($type, $class, $subTypes = array(), $dependantTypes = array(),  $dependantSubTypes = array())
    {
        if(!array_key_exists($type, $this->_response))
        {
            return null;
        }
        if(!array_key_exists($type, $this->_responseObj))
        {
            $setVal = array();
            foreach($this->_response[$type] as $stV)
            {
                $obj = new $class($stV, $subTypes, $dependantTypes);
                foreach($dependantSubTypes as $k => $v)
                {
                    $obj->_initDependant($stV, $k, $v);
                }
                array_push($setVal, $obj);
            }
            $this->_responseObj[$type] = $setVal;
        }
        return $this->_responseObj[$type];
    }

    private function _get($type, $class, $subTypes = array(), $dependantTypes = array())
    {
        if(!array_key_exists($type, $this->_response))
        {
                return null;
        }
        if(!array_key_exists($type, $this->_responseObj))
        {
                $this->_responseObj[$type] = new $class($this->_response[$type], $subTypes, $dependantTypes);
        }
        return $this->_responseObj[$type];
    }

}

?>