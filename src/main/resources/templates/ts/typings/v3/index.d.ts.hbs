{{#each resources}}///<reference path='./resources/{{{name}}}.d.ts' />
{{/each}}

export type Config = {
  /**
   * @apiKey api key for the site.
   */
  apiKey: string;
  /**
   * @site api site name.
   */
  site: string;
  /**
   * @apiPath this value indicates the api version, default value is /api/v2.
   */
  apiPath?: '/api/v2' | '/api/v1';
  /**
   * @timeout client side request timeout in milliseconds, default value is 80000ms.
   */
  timeout?: number;
  /**
   * @port url port
   */
  port?: number;
  /**
   * @timemachineWaitInMillis time interval at which two subsequent retrieve timemachine call in milliseconds, default value is 3000ms.
   */
  timemachineWaitInMillis?: number;
  /**
   * @exportWaitInMillis time interval at which two subsequent retrieve export call in milliseconds, default value is 3000ms.
   */
  exportWaitInMillis?: number;
  /**
   * @protocol http protocol, default value is https
   */
  protocol?: 'https' | 'http';
  /**
   * @hostSuffix url host suffix, default value is .chargebee.com
   */
  hostSuffix?: string;

  /**
   * @retryConfig retry configuration for the client, default value is { enabled: false, maxRetries: 3, delayMs: 1000, retryOn: [500, 502, 503, 504]}
   */
  retryConfig?: RetryConfig;

  /**
   * @enableDebugLogs whether to enable debug logs, default value is false
   */
  enableDebugLogs?: boolean;

  /**
   * @userAgentSuffix optional string appended to the User-Agent header for additional logging
   */
  userAgentSuffix?: string;
};

export type RetryConfig = {
  /**
   * @enabled whether to enable retry logic, default value is false
   * @maxRetries maximum number of retries, default value is 3
   * @delayMs delay in milliseconds between retries, default value is 1000ms
   * @retryOn array of HTTP status codes to retry on, default value is [500, 502, 503, 504]
   */
  enabled?: boolean;
  maxRetries?: number;
  delayMs?: number;
  retryOn?: Array<number>;
};
declare module 'chargebee' {
  export default class Chargebee {
    constructor(config: Config);;
    {{#each resources}}{{#if hasActions}} {{snakeCaseToCamelCaseAndSingularize id}}: {{name}}.{{name}}Resource;
    {{/if}}{{/each}}
  }
}