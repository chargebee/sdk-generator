package chargebee

import ({{#each responses}}
    "github.com/chargebee/chargebee-go/v3/models/{{golangCase name}}"{{/each}}
    "net/http"
    "strconv"
)

type ResultList struct {
    List []*Result `json:"list"`
    NextOffset string `json:"next_offset"`
    responseHeaders http.Header
    httpStatusCode  int
}
type Result struct {{curly "open"}}{{#each responses}}
    {{name}}    *{{golangCase name}}.{{name}}   `json:"{{ pascalCaseToSnakeCase name }},omitempty"`{{/each}}{{#each listResponses}}
    {{pluralize name}}    []*{{golangCase name}}.{{name}}   `json:"{{ pluralize id }},omitempty"`{{/each}}{{#each jsonResponses}}
    {{{snakeCaseToPascalCase .}}} interface{} `json:"{{.}},omitempty"`{{/each}}
    responseHeaders http.Header
    httpStatusCode int
}

func (rl *ResultList) GetResponseHeaders() http.Header {
    return rl.responseHeaders
}
func (rl *ResultList) GetHttpStatusCode() int {
    return rl.httpStatusCode
}
func (r *Result) GetResponseHeaders() http.Header {
    return r.responseHeaders
}
func (r *Result) GetHttpStatusCode() int {
    return r.httpStatusCode
}

func (r *Result) IsIdempotencyReplayed() bool {
    value := r.responseHeaders.Get(IdempotencyReplayHeader)
    replayed, err := strconv.ParseBool(value)
    if err != nil {
        return false
    }
    return replayed
}

type ResponseMeta struct {
    Headers http.Header
    Status string
    StatusCode int
}

type CBResponse struct {
    Body []byte
    ResponseMeta
}