package com.chargebee{{#if isApiV2}}.v2{{/if}}.internal;

import com.chargebee{{#if isApiV2}}.v2{{/if}}.models.*;
import org.json.JSONException;
import org.json.JSONObject;{{#unless isApiV1}}
import org.json.JSONArray;
import java.util.List;
import java.util.ArrayList;{{/unless}}

public class ResultBase {

    private JSONObject jsonObj;

    public ResultBase(JSONObject jsonObj) {
        this.jsonObj = jsonObj;
    }{{#if isApiV1}}

    // To get V2 resources !!
    public <R> R resource(Class<? extends Resource> modelClaz) {
        String key = ClazzUtil.getObjType(modelClaz);
        JSONObject modelJson = jsonObj.optJSONObject(key);
        if(modelJson == null) {
            return null;
        }
        return (R)ClazzUtil.createInstance(modelClaz, modelJson);
    }{{/if}}

{{#each responses}}
    public {{ name }} {{ pascalCaseToCamelCase name }}() {{curly "open"}}
        return ({{ name }})get("{{ pascalCaseToSnakeCase name }}");
    {{curly "close"}}
{{/each}}{{#unless isApiV1}}{{#each listResponses}}
    public List<{{ name }}> {{ pascalCaseToCamelCaseAndPluralize name }}() {{curly "open"}}
        return (List<{{ name }}>) getList("{{ pascalCaseToSnakeCaseAndPluralize name }}", "{{ pascalCaseToSnakeCase name }}");
    {{curly "close"}}
{{/each}}

    private List<? extends Resource> getList(String pluralName, String singularName) {
        JSONArray listModels = jsonObj.optJSONArray(pluralName);
        if (listModels == null) {
            return null;
        }
        try {
            List<Resource> list = new ArrayList<Resource>();
            for (int i = 0; i < listModels.length(); i++) {
                JSONObject modelJson = listModels.getJSONObject(i);
                list.add(_get(singularName, modelJson));
            }
            return list;
        } catch (JSONException jsonExp) {
            throw new RuntimeException(jsonExp);
        }
    }
{{/unless}}
    private Resource get(String key) {
        JSONObject modelJson = jsonObj.optJSONObject(key);
        return _get(key, modelJson);
    }

    private Resource _get(String key, JSONObject modelJson) {
        if(modelJson == null) {
            return null;
        }
        Class<Resource> modelClaz = ClazzUtil.getClaz(key);
        return ClazzUtil.createInstance(modelClaz, modelJson);
    }

    public JSONObject jsonObj(){
        return jsonObj;
    }

    @Override
    public String toString() {
        try {
            if(jsonObj == null){
                return null;
            }
            return jsonObj.toString(2);
        } catch (JSONException ex) {
            throw new RuntimeException(ex);
        }
    }


}
