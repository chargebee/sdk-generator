/*
 * This file is auto-generated by Chargebee.
 * For more information on how to make changes to this file, please see the README.
 * Reach out to dx@chargebee.com for any questions.
 * Copyright 2025 Chargebee Inc.
 */
package com.chargebee.v4.core.models.{{module}}.params;

import com.chargebee.v4.internal.Recommended;
import com.chargebee.v4.internal.JsonUtil;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.List;
import java.util.function.Consumer;
import java.sql.Timestamp;


public final class {{name}}Params {
{{>paramsContent this}}

    {{#each subModels}}
    public static final class {{name}}Params {
{{>paramsContent this}}
    }
    {{/each}}
}

{{#*inline "paramsContent"}}
    private final Map<String, Object> formData;

    private {{name}}Params({{name}}Builder builder) {
        this.formData = Collections.unmodifiableMap(new LinkedHashMap<>(builder.formData));
    }

    /**
     * Get the form data for this request.
     */
    public Map<String, Object> toFormData() {
        return formData;
    }

    /**
     * Create a new builder for {{name}}Params.
     */
    @Recommended(reason = "Preferred for reusability, validation, and LLM-friendliness")
    public static {{name}}Builder builder() {
        return new {{name}}Builder();
    }

    public static final class {{name}}Builder {
        private final Map<String, Object> formData = new LinkedHashMap<>();

        private {{../name}}Builder() {}

        {{#each fields}}
        {{#if subModelField}}
        {{#if compositeArrayField}}
        {{#if deprecated}}@Deprecated{{/if}}
        public {{../name}}Builder {{name}}(List<{{subModelParamsType}}> value) {
            if (value != null && !value.isEmpty()) {
                for (int i = 0; i < value.size(); i++) {
                    {{subModelParamsType}} item = value.get(i);
                    if (item != null) {
                        Map<String, Object> itemData = item.toFormData();
                        for (Map.Entry<String, Object> entry : itemData.entrySet()) {
                            String indexedKey = "{{curlName}}[" + entry.getKey() + "][" + i + "]";
                            formData.put(indexedKey, entry.getValue());
                        }
                    }
                }
            }
            return this;
        }
        {{else}}
        {{#if deprecated}}@Deprecated{{/if}}
        public {{../name}}Builder {{name}}({{subModelParamsType}} value) {
            if (value != null) {
                Map<String, Object> nestedData = value.toFormData();
                for (Map.Entry<String, Object> entry : nestedData.entrySet()) {
                    String nestedKey = "{{curlName}}[" + entry.getKey() + "]";
                    formData.put(nestedKey, entry.getValue());
                }
            }
            return this;
        }
        {{/if}}
        {{else}}
        {{#if deprecated}}@Deprecated{{/if}}
        public {{../name}}Builder {{name}}({{{type}}} value) {
            {{#if mapType}}
            formData.put("{{curlName}}", JsonUtil.toJson(value));
            {{else if isListType}}
            {{#if (or (eq listElementType "Object") (eq listElementType "java.util.Map<String, Object>"))}}
            formData.put("{{curlName}}", JsonUtil.toJson(value));
            {{else}}
            formData.put("{{curlName}}", value);
            {{/if}}
            {{else}}
            formData.put("{{curlName}}", value);
            {{/if}}
            return this;
        }
        {{/if}}
        {{/each}}

        public {{name}}Params build() {
            return new {{name}}Params(this);
        }

        {{#each enumFields}}
        public enum {{name}} {
            {{#each values}}
            {{this.key}}("{{this.value}}"),
            {{/each}}
            /**
                * An enum member indicating that {{name}} was instantiated with an unknown
                * value.
                */
            _UNKNOWN(null);
            private final String value;

            {{name}}(String value) {
                this.value = value;
            }

            public String getValue() {
                return value;
            }

            public static {{name}} fromString(String value) {
                if (value == null) return _UNKNOWN;
                for ({{name}} enumValue : {{name}}.values()) {
                    if (enumValue.value != null && enumValue.value.equals(value)) {
                        return enumValue;
                    }
                }
                return _UNKNOWN;
            }
        }
        {{/each}}
    }
{{/inline}}
