/*
 * This file is auto-generated by Chargebee.
 * For more information on how to make changes to this file, please see the README.
 * Reach out to dx@chargebee.com for any questions.
 * Copyright 2025 Chargebee Inc.
 */

package com.chargebee.v4.core.models.{{packageName}};

import com.chargebee.v4.internal.JsonUtil;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;
{{#each imports}}
import {{this}};
{{/each}}

public class {{name}} {
{{>modelContent this}}
}

{{#*inline "modelContent"}}
{{#each fields}}{{#if deprecated}}@Deprecated{{/if}}
private {{{type}}} {{name}};{{/each}}
{{#each fields}}
{{#if deprecated}}
@Deprecated
{{/if}}  public {{{type}}} {{getterName}}() {
  return {{name}};
}
{{/each}}
{{#each enumFields}}
  public enum {{name}} {
    {{#each values}}
      {{this.key}}("{{this.value}}"),
    {{/each}}
     /**
        * An enum member indicating that {{name}} was instantiated with an unknown
        * value.
        */
    _UNKNOWN(null);
    private final String value;

    {{name}}(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    public static {{name}} fromString(String value) {
        if (value == null) return _UNKNOWN;
        for ({{name}} enumValue : {{name}}.values()) {
            if (enumValue.value != null && enumValue.value.equals(value)) {
                return enumValue;
            }
        }
        return _UNKNOWN;
    }
  }
{{/each}}
 public static {{name}} fromJson(String json) {
  {{name}} obj = new {{name}}();
  {{#each fields}}
  {{#if isMapType}}
  String __{{name}}Json = JsonUtil.getObject(json, "{{curlName}}");
  obj.{{name}} = __{{name}}Json != null ? JsonUtil.parseJsonObjectToMap(__{{name}}Json) : new java.util.HashMap<>();
  {{else if isComplexObjectType}}
  String __{{name}}Json = JsonUtil.getObject(json, "{{curlName}}");
  if (__{{name}}Json != null) {
  obj.{{name}} = {{type}}.fromJson(__{{name}}Json);
  }
  {{else if isObjectType}}
  {{#if isPlainObjectType}}
  obj.{{name}} = JsonUtil.getObject(json, "{{curlName}}");
  {{else}}
  String __{{name}}Json = JsonUtil.getObject(json, "{{curlName}}");
  if (__{{name}}Json != null) {
  obj.{{name}} = {{type}}.fromJson(__{{name}}Json);
  }
  {{/if}}
  {{else if isEnumType}}
  obj.{{name}} = {{type}}.fromString(JsonUtil.getString(json, "{{curlName}}"));
  {{else if isListOfObjects}}
  obj.{{name}} = JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{curlName}}")).stream().map({{listElementType}}::fromJson).collect(java.util.stream.Collectors.toList());
  {{else if isListType}}
  {{#if (eq listElementType "Object")}}
  String __{{name}}Json = JsonUtil.getArray(json, "{{curlName}}");
  obj.{{name}} = __{{name}}Json != null ?
      JsonUtil.parseObjectArray(__{{name}}Json).stream()
          .map(JsonUtil::parseJsonObjectToMap)
          .collect(java.util.stream.Collectors.toList()) : null;
  {{else if (eq listElementType "java.util.Map<String, Object>")}}
  String __{{name}}Json = JsonUtil.getArray(json, "{{curlName}}");
  obj.{{name}} = __{{name}}Json != null ?
      JsonUtil.parseObjectArray(__{{name}}Json).stream()
          .map(JsonUtil::parseJsonObjectToMap)
          .collect(java.util.stream.Collectors.toList()) : null;
  {{else}}
  obj.{{name}} = JsonUtil.parseArrayOfString(JsonUtil.getArray(json, "{{curlName}}"));
  {{/if}}
  {{else}}
  obj.{{name}} = JsonUtil.get{{type}}(json, "{{curlName}}");
  {{/if}}
  {{/each}}
  return obj;
 }

{{#each subModels}}
  public static class {{name}} {
{{>modelContent this}}
  }
{{/each}}
{{/inline}}