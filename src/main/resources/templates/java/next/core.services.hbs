/*
 * This file is auto-generated by Chargebee.
 * For more information on how to make changes to this file, please see the README.
 * Reach out to dx@chargebee.com for any questions.
 * Copyright 2025 Chargebee Inc.
 */

package com.chargebee.v4.core.services;

import com.chargebee.v4.core.services.BaseService;
import com.chargebee.v4.core.services.ServiceConfig;
import com.chargebee.v4.client.ChargebeeClient;
import com.chargebee.v4.client.request.RequestOptions;
import com.chargebee.v4.transport.Response;
import java.util.Map;
import java.util.List;
{{#each operations}}
import com.chargebee.v4.core.models.{{../packageName}}.params.{{paramsClassName}};
{{/each}}
{{#each operations}}
import com.chargebee.v4.core.responses.{{../packageName}}.{{returnType}};
{{/each}}


public final class {{name}}Service extends BaseService<{{name}}Service> {
    
    private final ServiceConfig config;
    
    public {{name}}Service(ChargebeeClient client) {
        super(client);
        this.config = ServiceConfig.defaultConfig();
    }
    
    private {{name}}Service(ChargebeeClient client, RequestOptions options) {
        super(client, options);
        this.config = ServiceConfig.defaultConfig();
    }
    
    private {{name}}Service(ChargebeeClient client, RequestOptions options, ServiceConfig config) {
        super(client, options);
        this.config = config;
    }
    
    @Override
    {{name}}Service with(RequestOptions newOptions) {
        return new {{name}}Service(client, newOptions, config);
    }
    
    /**
     * Apply per-request options for this service instance.
     * Users can chain .withOptions or .options to set headers and other options.
     */
    public {{name}}Service withOptions(RequestOptions options) {
        return with(options);
    }
    
    // === Operations ===
    {{#each operations}}
    {{#if hasPathParams}}
    {{#if isListResponse}}
    
    /**
     * {{methodName}} a {{../packageName}} using immutable params (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw(String {{pathParamName}}, {{paramsClassName}} params) throws Exception {
        String path = buildPathWithParams("{{path}}", "{{pathParam}}", {{pathParamName}});
        return get(path, params != null ? params.toQueryParams() : null);
    }

    /**
     * {{methodName}} a {{../packageName}} without params (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw(String {{pathParamName}}) throws Exception {
        String path = buildPathWithParams("{{path}}", "{{pathParam}}", {{pathParamName}});
        return get(path, null);
    }

    /**
     * {{methodName}} a {{../packageName}} using raw JSON payload (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw(String {{pathParamName}}, String jsonPayload) throws Exception {
        String path = buildPathWithParams("{{path}}", "{{pathParam}}", {{pathParamName}});
        throw new UnsupportedOperationException("JSON payload not supported for GET operations");
    }

    public {{returnType}} {{methodName}}(String {{pathParamName}}, {{paramsClassName}} params) throws Exception {
        Response response = {{methodName}}Raw({{pathParamName}}, params);
        return {{returnType}}.fromJson(response.getBodyAsString(), this, params, {{pathParamName}}, response);
    }

    public {{returnType}} {{methodName}}(String {{pathParamName}}) throws Exception {
        Response response = {{methodName}}Raw({{pathParamName}});
        return {{returnType}}.fromJson(response.getBodyAsString(), this, null, {{pathParamName}}, response);
    }

    {{else}}
    
    /**
     * {{methodName}} a {{../packageName}} (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw(String {{pathParamName}}) throws Exception {
        String path = buildPathWithParams("{{path}}", "{{pathParam}}", {{pathParamName}});
        {{#if (eq httpMethod "post")}}
        return post(path, null);
        {{else}}
        return get(path, null);
        {{/if}}
    }

    {{#if (and (eq httpMethod "post") hasRequestBody)}}
    /**
     * {{methodName}} a {{../packageName}} using immutable params (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw(String {{pathParamName}}, {{paramsClassName}} params) throws Exception {
        String path = buildPathWithParams("{{path}}", "{{pathParam}}", {{pathParamName}});
        return post(path, params.toFormData());
    }

    /**
     * {{methodName}} a {{../packageName}} using raw JSON payload (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw(String {{pathParamName}}, String jsonPayload) throws Exception {
        String path = buildPathWithParams("{{path}}", "{{pathParam}}", {{pathParamName}});
        return postJson(path, jsonPayload);
    }

    public {{returnType}} {{methodName}}(String {{pathParamName}}, {{paramsClassName}} params) throws Exception {
        Response response = {{methodName}}Raw({{pathParamName}}, params);
        return {{returnType}}.fromJson(response.getBodyAsString(), response);
    }
    {{/if}}

    {{#unless (and (eq httpMethod "post") hasRequestBody)}}
    public {{returnType}} {{methodName}}(String {{pathParamName}}) throws Exception {
        Response response = {{methodName}}Raw({{pathParamName}});
        return {{returnType}}.fromJson(response.getBodyAsString(), response);
    }
    {{/unless}}

    {{/if}}
    {{else}}
    
    /**
     * {{methodName}} a {{../packageName}} using immutable params (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw({{paramsClassName}} params) throws Exception {
        {{#if (eq httpMethod "post")}}
        return post("{{path}}", params != null ? params.toFormData() : null);
        {{else}}
        return get("{{path}}", params != null ? params.toQueryParams() : null);
        {{/if}}
    }

    {{#if isListResponse}}
    /**
     * {{methodName}} a {{../packageName}} without params (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw() throws Exception {
        {{#if (eq httpMethod "post")}}
        return post("{{path}}", null);
        {{else}}
        return get("{{path}}", null);
        {{/if}}
    }
    {{/if}}

    /**
     * {{methodName}} a {{../packageName}} using raw JSON payload (executes immediately) - returns raw Response.
     */
    Response {{methodName}}Raw(String jsonPayload) throws Exception {
        {{#if (eq httpMethod "post")}}
        return postJson("{{path}}", jsonPayload);
        {{else}}
        throw new UnsupportedOperationException("JSON payload not supported for GET operations");
        {{/if}}
    }

    public {{returnType}} {{methodName}}({{paramsClassName}} params) throws Exception {
        Response response = {{methodName}}Raw(params);
        {{#if isListResponse}}
        return {{returnType}}.fromJson(response.getBodyAsString(), this, params, response);
        {{else}}
        return {{returnType}}.fromJson(response.getBodyAsString(), response);
        {{/if}}
    }

    {{#if isListResponse}}
    public {{returnType}} {{methodName}}() throws Exception {
        Response response = {{methodName}}Raw();
        return {{returnType}}.fromJson(response.getBodyAsString(), this, null, response);
    }
    {{/if}}

    {{/if}}
    {{/each}}
}