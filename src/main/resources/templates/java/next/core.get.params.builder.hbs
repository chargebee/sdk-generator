/*
 * This file is auto-generated by Chargebee.
 * For more information on how to make changes to this file, please see the README.
 * Reach out to dx@chargebee.com for any questions.
 * Copyright 2025 Chargebee Inc.
 */

package com.chargebee.v4.core.models.{{module}}.params;

import com.chargebee.v4.internal.Recommended;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.List;
import java.util.function.Consumer;



public final class {{name}}Params {
{{>getParamsContent this}}

    {{#each subModels}}
    public static final class {{name}}Params {
{{>getParamsContent this}}
    }
    {{/each}}
}

{{#*inline "getParamsContent"}}
    private final Map<String, Object> queryParams;

    private {{name}}Params({{name}}Builder builder) {
        this.queryParams = Collections.unmodifiableMap(new LinkedHashMap<>(builder.queryParams));
    }

    /**
     * Get the query parameters for this request.
     */
    public Map<String, Object> toQueryParams() {
        return queryParams;
    }

    public {{name}}Builder toBuilder() {
        {{name}}Builder builder = new {{name}}Builder();
        builder.queryParams.putAll(queryParams);
        return builder;
    }

    /**
     * Create a new builder for {{name}}Params.
     */
    @Recommended(reason = "Preferred for reusability, validation, and LLM-friendliness")
    public static {{name}}Builder builder() {
        return new {{name}}Builder();
    }

    public static final class {{name}}Builder {
        private final Map<String, Object> queryParams = new LinkedHashMap<>();

        private {{../name}}Builder() {}

        {{#each fields~}}
        {{#if isFilter}}{{#if deprecated}}
        @Deprecated
{{/if}}        public {{filterType}} {{name}}() {
            return new {{filterType}}("{{curlName}}", this);
        }
        {{else}}{{#if isSort}}{{#if deprecated}}
        @Deprecated
{{/if}}        public {{sortBuilderType}} {{name}}() {
            return new {{sortBuilderType}}("{{curlName}}", this);
        }
        {{else}}{{#if subModelField}}{{#if deprecated}}
        @Deprecated
{{/if}}        public {{../name}}Builder {{name}}({{subModelParamsType}} value) {
            queryParams.put("{{curlName}}", value);
            return this;
        }
        {{else}}{{#if deprecated}}
        @Deprecated
{{/if}}        public {{../name}}Builder {{name}}({{{type}}} value) {
            queryParams.put("{{curlName}}", value);
            return this;
        }
        {{/if}}{{/if}}{{/if}}
        {{/each}}

        public {{name}}Params build() {
            return new {{name}}Params(this);
        }

        {{#each fields}}
        {{#if isFilter}}
        public static final class {{filterType}} {
            private final String fieldName;
            private final {{../name}}Builder builder;

            {{filterType}}(String fieldName, {{../name}}Builder builder) {
                this.fieldName = fieldName;
                this.builder = builder;
            }

            {{#each supportedOperations}}
            {{#if (eq this "is")}}
            public {{../../../name}}Builder is(String value) {
                builder.queryParams.put(fieldName + "[is]", value);
                return builder;
            }
            {{/if}}
            {{#if (eq this "is_not")}}
            public {{../../../name}}Builder isNot(String value) {
                builder.queryParams.put(fieldName + "[is_not]", value);
                return builder;
            }
            {{/if}}
            {{#if (eq this "starts_with")}}
            public {{../../../name}}Builder startsWith(String value) {
                builder.queryParams.put(fieldName + "[starts_with]", value);
                return builder;
            }
            {{/if}}
            {{#if (eq this "in")}}
            public {{../../../name}}Builder in(String... values) {
                builder.queryParams.put(fieldName + "[in]", "[" + String.join(",", values) + "]");
                return builder;
            }
            {{/if}}
            {{#if (eq this "not_in")}}
            public {{../../../name}}Builder notIn(String... values) {
                builder.queryParams.put(fieldName + "[not_in]", "[" + String.join(",", values) + "]");
                return builder;
            }
            {{/if}}
            {{#if (eq this "is_present")}}
            public {{../../../name}}Builder isPresent(boolean value) {
                builder.queryParams.put(fieldName + "[is_present]", String.valueOf(value));
                return builder;
            }
            {{/if}}
            {{#if (eq this "after")}}
            public {{../../../name}}Builder after(String timestamp) {
                builder.queryParams.put(fieldName + "[after]", timestamp);
                return builder;
            }
            {{/if}}
            {{#if (eq this "before")}}
            public {{../../../name}}Builder before(String timestamp) {
                builder.queryParams.put(fieldName + "[before]", timestamp);
                return builder;
            }
            {{/if}}
            {{#if (eq this "on")}}
            public {{../../../name}}Builder on(String timestamp) {
                builder.queryParams.put(fieldName + "[on]", timestamp);
                return builder;
            }
            {{/if}}
            {{#if (eq this "between")}}
            public {{../../../name}}Builder between(String start, String end) {
                builder.queryParams.put(fieldName + "[between]", "[" + start + "," + end + "]");
                return builder;
            }
            {{/if}}
            {{#if (eq this "asc")}}
            public {{../../../name}}Builder asc() {
                builder.queryParams.put(fieldName + "[asc]", "true");
                return builder;
            }
            {{/if}}
            {{#if (eq this "desc")}}
            public {{../../../name}}Builder desc() {
                builder.queryParams.put(fieldName + "[desc]", "true");
                return builder;
            }
            {{/if}}
            {{/each}}
        }
        {{/if}}
        {{/each}}

        {{#each fields}}
        {{#if isSort}}
        public static final class {{sortBuilderType}} {
            private final String fieldName;
            private final {{../name}}Builder builder;

            {{sortBuilderType}}(String fieldName, {{../name}}Builder builder) {
                this.fieldName = fieldName;
                this.builder = builder;
            }

            {{#each sortableFields}}
            public SortDirection {{this}}() {
                return new SortDirection(fieldName, "{{this}}", builder);
            }
            {{/each}}
        }

        public static final class SortDirection {
            private final String fieldName;
            private final String selectedField;
            private final {{../name}}Builder builder;

            SortDirection(String fieldName, String selectedField, {{../name}}Builder builder) {
                this.fieldName = fieldName;
                this.selectedField = selectedField;
                this.builder = builder;
            }

            public {{../name}}Builder asc() {
                builder.queryParams.put(fieldName + "[asc]", selectedField);
                return builder;
            }

            public {{../name}}Builder desc() {
                builder.queryParams.put(fieldName + "[desc]", selectedField);
                return builder;
            }
        }
        {{/if}}
        {{/each}}


        {{#each enumFields}}
        public enum {{name}} {
            {{#each values}}
            {{this.key}}("{{this.value}}"),
            {{/each}}
            /**
                * An enum member indicating that {{name}} was instantiated with an unknown
                * value.
                */
            _UNKNOWN(null);
            private final String value;

            {{name}}(String value) {
                this.value = value;
            }

            public String getValue() {
                return value;
            }

            public static {{name}} fromString(String value) {
                if (value == null) return _UNKNOWN;
                for ({{name}} enumValue : {{name}}.values()) {
                    if (enumValue.value != null && enumValue.value.equals(value)) {
                        return enumValue;
                    }
                }
                return _UNKNOWN;
            }
        }
        {{/each}}
    }
{{/inline}}