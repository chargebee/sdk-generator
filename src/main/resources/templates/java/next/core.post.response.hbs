package com.chargebee.v4.core.responses.{{module}};

import java.util.List;
{{#each imports}}
import com.chargebee.v4.core.models.{{moduleName}}.{{name}};
{{/each}}
import com.chargebee.v4.internal.JsonUtil;
import com.chargebee.v4.transport.Response;
import java.sql.Timestamp;

/**
 * Immutable response object for {{name}} operation.
 * Contains the response data from the API.
 */
public final class {{name}}Response {
    {{#each fields}}
    private final {{{type}}} {{name}};
    {{/each}}
    private final Response httpResponse;

    private {{name}}Response(Builder builder) {
        {{#each fields}}
        this.{{name}} = builder.{{name}};
        {{/each}}
        this.httpResponse = builder.httpResponse;
    }

    /**
     * Parse JSON response into {{name}}Response object.
     */
    public static {{name}}Response fromJson(String json) {
        return fromJson(json, null);
    }

    /**
     * Parse JSON response into {{name}}Response object with HTTP response.
     */
    public static {{name}}Response fromJson(String json, Response httpResponse) {
        try {
            Builder builder = builder();
            {{#each fields}}
            {{#if isComplexObjectType}}
            String __{{name}}Json = JsonUtil.getObject(json, "{{curlName}}");
            if (__{{name}}Json != null) {
            builder.{{name}}({{{type}}}.fromJson(__{{name}}Json));
            }
            {{else if isEnumType}}
            builder.{{name}}({{{type}}}.fromString(JsonUtil.getString(json, "{{curlName}}")));
            {{else if isListOfObjects}}
            {{#if listElementType}}
            {{#unless (eq listElementType "Object")}}
            builder.{{name}}(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{curlName}}")).stream().map({{listElementType}}::fromJson).collect(java.util.stream.Collectors.toList()));
            {{else}}
            builder.{{name}}(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{curlName}}")));
            {{/unless}}
            {{else}}
            builder.{{name}}(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{curlName}}")));
            {{/if}}
            {{else if isListType}}
            builder.{{name}}(JsonUtil.parseArrayOfString(JsonUtil.getArray(json, "{{curlName}}")));
            {{else if isObjectType}}
            {{#if (eq type "Object")}}
            builder.{{name}}(JsonUtil.getObject(json, "{{curlName}}"));
            {{else}}
            String __{{name}}Json = JsonUtil.getObject(json, "{{curlName}}");
            if (__{{name}}Json != null) {
            builder.{{name}}({{{type}}}.fromJson(__{{name}}Json));
            }
            {{/if}}
            {{else}}
            builder.{{name}}(JsonUtil.get{{{type}}}(json, "{{curlName}}"));
            {{/if}}
            {{/each}}
            
            builder.httpResponse(httpResponse);
            return builder.build();
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse {{name}}Response from JSON", e);
        }
    }

    /**
     * Create a new builder for {{name}}Response.
     */
    public static Builder builder() {
        return new Builder();
    }

    /**
     * Builder for {{name}}Response.
     */
    public static class Builder {
        {{#each fields}}
        private {{{type}}} {{name}};
        {{/each}}
        private Response httpResponse;

        private Builder() {}

        {{#each fields}}
        public Builder {{name}}({{{type}}} {{name}}) {
            this.{{name}} = {{name}};
            return this;
        }

        {{/each}}
        public Builder httpResponse(Response httpResponse) {
            this.httpResponse = httpResponse;
            return this;
        }

        public {{name}}Response build() {
            return new {{name}}Response(this);
        }
    }

    {{#each fields}}
    /**
     * Get the {{name}} from the response.
     */
    public {{{type}}} {{getterName}}() {
        return {{name}};
    }

    {{/each}}
    /**
     * Get the raw response payload as JSON string.
     */
    public String responsePayload() {
        return httpResponse != null ? httpResponse.getBodyAsString() : null;
    }

    /**
     * Get the HTTP status code.
     */
    public int httpStatus() {
        return httpResponse != null ? httpResponse.getStatusCode() : 0;
    }

    /**
     * Get response headers.
     */
    public java.util.Map<String, java.util.List<String>> headers() {
        return httpResponse != null ? httpResponse.getHeaders() : java.util.Collections.emptyMap();
    }

    /**
     * Get a specific header value.
     */
    public java.util.List<String> header(String name) {
        if (httpResponse == null) return null;
        return httpResponse.getHeaders().entrySet().stream()
            .filter(e -> e.getKey().equalsIgnoreCase(name))
            .map(java.util.Map.Entry::getValue)
            .findFirst()
            .orElse(null);
    }
}