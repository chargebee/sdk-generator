package com.chargebee.core.responses.{{module}};

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.sql.Timestamp;

{{#each imports}}
import {{packageName}}.{{name}};
{{/each}}
import com.chargebee.internal.JsonUtil;
import com.chargebee.core.services.{{serviceName}};
import com.chargebee.core.models.{{module}}.params.{{name}}Params;

/**
 * Immutable response object for {{name}} operation.
 * Contains paginated list data with auto-pagination support.
 */
public final class {{name}}Response implements Iterable<{{#unless (eq itemType "Object")}}{{name}}Response.{{/unless}}{{itemType}}> {
    {{#each fields}}
    private final {{{type}}} {{name}};
    {{/each}}
    {{#if hasPathParams}}
    private final String {{pathParamName}};
    {{/if}}
    private final {{serviceName}} service;
    private final {{name}}Params originalParams;
    private final boolean isAutoPaginate;

    private {{name}}Response(
        {{#each fields}}{{{type}}} {{name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if hasPathParams}}, String {{pathParamName}}{{/if}},
        {{serviceName}} service,
        {{name}}Params originalParams
    ) {
        {{#each fields}}
        this.{{name}} = {{name}};
        {{/each}}
        {{#if hasPathParams}}
        this.{{pathParamName}} = {{pathParamName}};
        {{/if}}
        this.service = service;
        this.originalParams = originalParams;
        this.isAutoPaginate = false;
    }

    private {{name}}Response(
        {{#each fields}}{{{type}}} {{name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if hasPathParams}}, String {{pathParamName}}{{/if}},
        {{serviceName}} service,
        {{name}}Params originalParams,
        boolean isAutoPaginate
    ) {
        {{#each fields}}
        this.{{name}} = {{name}};
        {{/each}}
        {{#if hasPathParams}}
        this.{{pathParamName}} = {{pathParamName}};
        {{/if}}
        this.service = service;
        this.originalParams = originalParams;
        this.isAutoPaginate = isAutoPaginate;
    }

    /**
     * Parse JSON response into {{name}}Response object (no service context).
     * Use this when you only need to read a single page (no nextPage()).
     */
    public static {{name}}Response fromJson(String json) {
        try {
            {{#each fields}}
            {{#if isComplexObjectType}}
            {{{type}}} {{name}} = {{{type}}}.fromJson(JsonUtil.getObject(json, "{{name}}"));
            {{else if isEnumType}}
            {{{type}}} {{name}} = {{{type}}}.fromString(JsonUtil.getString(json, "{{name}}"));
            {{else if isListOfObjects}}
              {{#if listElementType}}
                {{#unless (eq listElementType "Object")}}
                {{{type}}} {{name}} =
                    JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{name}}"))
                        .stream()
                        .map({{listElementType}}::fromJson)
                        .collect(java.util.stream.Collectors.toList());
                {{else}}
                {{{type}}} {{name}} =
                    new ArrayList<>(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{name}}")));
                {{/unless}}
              {{else}}
              {{{type}}} {{name}} =
                  JsonUtil.parseArrayOfString(JsonUtil.getArray(json, "{{name}}"));
              {{/if}}
            {{else if isListOfPrimitives}}
            {{{type}}} {{name}} =
                JsonUtil.parseArrayOfString(JsonUtil.getArray(json, "{{name}}"));
            {{else if isListType}}
            {{#if (eq listElementType "Object")}}
            {{{type}}} {{name}} =
                new ArrayList<>(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{name}}")));
            {{else}}
            {{{type}}} {{name}} =
                JsonUtil.parseArrayOfString(JsonUtil.getArray(json, "{{name}}"));
            {{/if}}
            {{else if isObjectType}}
            {{#unless (eq type "Object")}}
            {{{type}}} {{name}} = {{{type}}}.fromJson(JsonUtil.getObject(json, "{{name}}"));
            {{else}}
            {{{type}}} {{name}} = JsonUtil.getObject(json, "{{name}}");
            {{/unless}}
            {{else}}
            {{{type}}} {{name}} = JsonUtil.get{{{type}}}(json, "{{name}}");
            {{/if}}
            {{/each}}

            return new {{name}}Response({{#each fields}}{{name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if hasPathParams}}, null{{/if}}, null, null);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse {{name}}Response from JSON", e);
        }
    }

    /**
     * Parse JSON response into {{name}}Response object with service context
     * for pagination (enables nextPage(), autoPaginate()).
     */
    public static {{name}}Response fromJson(String json, {{serviceName}} service, {{name}}Params originalParams{{#if hasPathParams}}, String {{pathParamName}}{{/if}}) {
        try {
            {{#each fields}}
            {{#if isComplexObjectType}}
            {{{type}}} {{name}} = {{{type}}}.fromJson(JsonUtil.getObject(json, "{{name}}"));
            {{else if isEnumType}}
            {{{type}}} {{name}} = {{{type}}}.fromString(JsonUtil.getString(json, "{{name}}"));
            {{else if isListOfObjects}}
              {{#if listElementType}}
                {{#unless (eq listElementType "Object")}}
                {{{type}}} {{name}} =
                    JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{name}}"))
                        .stream()
                        .map({{listElementType}}::fromJson)
                        .collect(java.util.stream.Collectors.toList());
                {{else}}
                {{{type}}} {{name}} =
                    new ArrayList<>(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{name}}")));
                {{/unless}}
              {{else}}
              {{{type}}} {{name}} =
                  JsonUtil.parseStringArray(JsonUtil.getArray(json, "{{name}}"));
              {{/if}}
            {{else if isListOfPrimitives}}
            {{{type}}} {{name}} =
                JsonUtil.parseStringArray(JsonUtil.getArray(json, "{{name}}"));
            {{else if isListType}}
            {{#if (eq listElementType "Object")}}
            {{{type}}} {{name}} =
                new ArrayList<>(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{name}}")));
            {{else}}
            {{{type}}} {{name}} =
                JsonUtil.parseStringArray(JsonUtil.getArray(json, "{{name}}"));
            {{/if}}
            {{else if isObjectType}}
            {{#unless (eq type "Object")}}
            {{{type}}} {{name}} = {{{type}}}.fromJson(JsonUtil.getObject(json, "{{name}}"));
            {{else}}
            {{{type}}} {{name}} = JsonUtil.getObject(json, "{{name}}");
            {{/unless}}
            {{else}}
            {{{type}}} {{name}} = JsonUtil.get{{{type}}}(json, "{{name}}");
            {{/if}}
            {{/each}}

            return new {{name}}Response({{#each fields}}{{name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if hasPathParams}}, {{pathParamName}}{{/if}}, service, originalParams);
        } catch (Exception e) {
            throw new RuntimeException("Failed to parse {{name}}Response from JSON", e);
        }
    }

    {{#each fields}}
    /** Get the {{name}} from the response. */
    public {{{type}}} {{getterName}}() {
        return {{name}};
    }
    {{/each}}

    /** Get the list of items in this page (alias). */
    public List<{{itemType}}> items() {
        return {{listFieldName}};
    }

    /** Check if there are more pages available. */
    public boolean hasNextPage() {
        return {{nextOffsetField}} != null && !{{nextOffsetField}}.isEmpty();
    }

    /**
     * Get the next page of results.
     * @throws Exception if unable to fetch next page
     */
    public {{name}}Response nextPage() throws Exception {
        if (!hasNextPage()) {
            throw new IllegalStateException("No more pages available");
        }
        if (service == null || originalParams == null) {
            throw new UnsupportedOperationException("nextPage() requires service context. Use fromJson(json, service, originalParams).");
        }

        // Create new params with the next offset
        {{name}}Params nextParams = originalParams.toBuilder()
            .offset({{nextOffsetField}})
            .build();

        return service.{{operationMethodName}}({{#if hasPathParams}}{{pathParamName}}, {{/if}}nextParams);
    }

    /**
     * Enable auto-pagination for this response.
     * Returns a new response that will automatically iterate through all pages.
     */
    public {{name}}Response autoPaginate() {
        return new {{name}}Response(
            {{#each fields}}{{name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if hasPathParams}}, {{pathParamName}}{{/if}},
            service,
            originalParams,
            true
        );
    }

    /** Iterator implementation for auto-pagination support. */
    @Override
    public Iterator<{{itemType}}> iterator() {
        if (isAutoPaginate) {
            return new AutoPaginateIterator();
        } else {
            return {{listFieldName}}.iterator();
        }
    }

    /** Internal iterator class for auto-pagination. */
    private class AutoPaginateIterator implements Iterator<{{itemType}}> {
        private {{name}}Response currentPage = {{name}}Response.this;
        private Iterator<{{itemType}}> currentIterator = currentPage.{{listFieldName}}.iterator();

        @Override
        public boolean hasNext() {
            if (currentIterator.hasNext()) {
                return true;
            }

            // Try to load next page if available
            if (currentPage.hasNextPage()) {
                try {
                    currentPage = currentPage.nextPage();
                    currentIterator = currentPage.{{listFieldName}}.iterator();
                    return currentIterator.hasNext();
                } catch (Exception e) {
                    throw new RuntimeException("Failed to fetch next page", e);
                }
            }

            return false;
        }

        @Override
        public {{itemType}} next() {
            if (!hasNext()) {
                throw new NoSuchElementException();
            }
            return currentIterator.next();
        }
    }

    {{#each subModels}}
    public static class {{name}} {
        {{#each fields}}
        private {{{type}}} {{name}};
        {{/each}}
    
        {{#each fields}}
        public {{{type}}} {{getterName}}() {
            return {{name}};
        }
        {{/each}}


    public static {{name}} fromJson(String json) {
        {{name}} item = new {{name}}();
        {{#each fields}}
        {{#if isComplexObjectType}}
        String __{{name}}Json = JsonUtil.getObject(json, "{{curlName}}");
        if (__{{name}}Json != null) {
        item.{{name}} = {{{type}}}.fromJson(__{{name}}Json);
        }
        {{else if isObjectType}}
        {{#unless (eq type "Object")}}
        item.{{name}} = {{{type}}}.fromJson(JsonUtil.getObject(json, "{{curlName}}"));
        {{else}}
        item.{{name}} = JsonUtil.getObject(json, "{{curlName}}");
        {{/unless}}
        {{else if isEnumType}}
        item.{{name}} = {{{type}}}.fromString(JsonUtil.getString(json, "{{curlName}}"));
        {{else if isListOfObjects}}
        item.{{name}} = JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{curlName}}")).stream().map({{listElementType}}::fromJson).collect(java.util.stream.Collectors.toList());
        {{else if isListType}}
        {{#if (eq listElementType "Object")}}
        item.{{name}} = new ArrayList<>(JsonUtil.parseObjectArray(JsonUtil.getArray(json, "{{curlName}}")));
        {{else}}
        item.{{name}} = JsonUtil.parseArrayOfString(JsonUtil.getArray(json, "{{curlName}}"));
        {{/if}}
        {{else}}
        item.{{name}} = JsonUtil.get{{type}}(json, "{{curlName}}");
        {{/if}}
        {{/each}}
        return item;
    }
    }
    {{/each}}
}

