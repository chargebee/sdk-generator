        public TimeMachine WaitForTimeTravelCompletion() {
            return WaitForTimeTravelCompletion(null);
        }

        public TimeMachine WaitForTimeTravelCompletion(ApiConfig config)
        {
            int count = 0;
            while (this.TimeTravelStatus == TimeTravelStatusEnum.InProgress)
            {
                if (count++ > 30)
                {
                    throw new Exception("Time travel is taking too much time");
                }
                var t = Task.Factory.StartNew(() =>
                {
                    Task.Delay(ApiConfig.TimeTravelMillis).Wait();
                });
                t.Wait();
                EntityRequest<Type> req = Retrieve(this.Name);
                this.JObj = ((config == null) ? req.Request() : req.Request(config)).TimeMachine.JObj;
            }
            if (this.TimeTravelStatus == TimeTravelStatusEnum.Failed)
            {
                Dictionary<String, String> errorJson = JsonConvert.DeserializeObject<Dictionary<String, String>>(this.ErrorJson
                );
                HttpStatusCode httpStatusCode = (HttpStatusCode)Convert.ToInt32(errorJson["http_code"]);
                throw new Exceptions.OperationFailedException(httpStatusCode, errorJson);
            }
            if (this.TimeTravelStatus == TimeTravelStatusEnum.NotEnabled || this.TimeTravelStatus == TimeTravelStatusEnum.UnKnown)
            {
                throw new Exception("Time travel is in wrong state : " + this.TimeTravelStatus);
            }
            return this;
        }