
    def wait_for_time_travel_completion(
        self, time_machine: TimeMachineResponse
    ) -> RetrieveResponse:
        import time

        response: RetrieveResponse = None
        count = 0
        retry_delay_ms = (
            3000 if self.env is None else self.env.time_travel_retry_delay_ms
        ) / 1000.0

        while time_machine.time_travel_status == "in_progress":
            if count > 30:
                raise RuntimeError("Time travel is taking too much time")
            count += 1
            time.sleep(retry_delay_ms)
            response = self.retrieve(time_machine.name)
            time_machine = response.time_machine

        if time_machine.time_travel_status == "failed":
            err = json.loads(time_machine.error_json)
            raise OperationFailedError(err["http_code"], err)

        if time_machine.time_travel_status in ("not_enabled", "_unknown"):
            raise RuntimeError(
                "Time travel is in wrong state '"
                + time_machine.time_travel_status
                + "'"
            )

        return response