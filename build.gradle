plugins {
    id "application"
    id 'com.adarshr.test-logger' version '3.2.0'
    id "jacoco"
    id 'com.diffplug.spotless' version '6.25.0'
}
apply plugin : "java"

group 'com.chargebee'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation 'io.swagger.parser.v3:swagger-parser:2.1.31'
    implementation 'com.github.jknack:handlebars:4.3.1'
    implementation 'info.picocli:picocli:4.7.4'
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
    implementation 'org.atteo:evo-inflector:1.3'
    implementation 'com.google.googlejavaformat:google-java-format:1.22.0'

    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
}

application {
    mainClass = "com.chargebee.Main"
    applicationDefaultJvmArgs = [
        '--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
        '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ]
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    jacoco {
        enabled = true
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore'
        trimTrailingWhitespace()
        endWithNewline()
        indentWithTabs(2)
        indentWithSpaces(4)
    }
    java {
        googleJavaFormat('1.22.0').reflowLongStrings().skipJavadocFormatting()
        formatAnnotations()
    }
}


jacocoTestReport {
    dependsOn test
    executionData(file("${project.buildDir}/jacoco/test.exec"))
    reports {
        html {
            enabled true
            destination file("${buildDir}/jacocoHtml")
        }
        xml {
            enabled true
            destination file("${buildDir}/jacoco/test.xml")
        }
    }
}



test.finalizedBy jacocoTestReport
